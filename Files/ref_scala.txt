import com.github.music.of.the.ainur.almaren.builder.Core.Implicit
import com.github.music.of.the.ainur.almaren.Almaren
import com.github.music.of.the.ainur.almaren.jdbcparallel.SourceJdbcParallelConn.SourceJdbcParallelImplicit
import org.apache.spark.sql.{DataFrame, DataFrameReader}
import java.time.LocalDateTime
import org.apache.spark.SparkContext
import org.apache.spark.sql.SQLContext
import org.apache.spark.sql._

val almaren = Almaren("EDW_NPE_12102021")
var spark = SparkSession.builder().getOrCreate()
spark.conf.set("fs.azure.account.key.idea15pisplznonprodsa.dfs.core.windows.net", "no7nIltmtwUOW/6Ics6YnPSUOwdrU3qd4DAprbcnDgvaWTXXKMUcETIcvWB0pDsyi/qbw9+LtJG+qWOGMWED1g==") 
val df  = almaren.builder.sourceJdbcParallel("jdbc:oracle:thin:@edwdev-scan.humana.com:1521/edwqa","oracle.jdbc.OracleDriver",
 List("SELECT cast(LAB_RESULT_KEY as varchar(255)) as lab_result_key,  LAB_VENDOR_TAX_ID as lab_vendor_tax_id,  cast(LOAD_DATE_SKEY as varchar(255)) as load_date_skey,  FILE_SEQ_ID as file_seq_id,  LAB_VENDOR_NAME as lab_vendor_name,  to_char(PROCESS_DATE, 'YYYY-MM-DD HH24:MI:SS') as process_date,  to_char(SERVICE_DATE, 'YYYY-MM-DD HH24:MI:SS') as service_date,  ACCESSION_NBR as accession_nbr,  MEDICAL_RECORD_ID as medical_record_id,  PATIENT_FIRST_NAME as patient_first_name,  PATIENT_MIDDLE_NAME as patient_middle_name,  PATIENT_LAST_NAME as patient_last_name,  PATIENT_ADDRESS_LINE1 as patient_address_line1,  PATIENT_ADDRESS_LINE2 as patient_address_line2,  PATIENT_CITY_NAME as patient_city_name,  PATIENT_STATE as patient_state,  PATIENT_ZIP_CD as patient_zip_cd,  PATIENT_PHONE_NBR as patient_phone_nbr,  to_char(PATIENT_BIRTH_DATE, 'YYYY-MM-DD HH24:MI:SS') as patient_birth_date,  PATIENT_GENDER as patient_gender,  PATIENT_SSN as patient_ssn,  PATIENT_IDCARD_MEMBER_ID as patient_idcard_member_id,  PATIENT_MEDICARE_ID as patient_medicare_id,  PATIENT_MEDICAID_ID as patient_medicaid_id,  PATIENT_GROUP_NBR as patient_group_nbr,  to_char(COLLECTION_DATE, 'YYYY-MM-DD HH24:MI:SS') as collection_date,  ORD_PROV_TAX_ID as ord_prov_tax_id,  ORD_PROV_UPIN_ID as ord_prov_upin_id,  ORD_PROV_NPI_ID as ord_prov_npi_id,  DIAG1_CD as diag1_cd,  DIAG2_CD as diag2_cd,  DIAG3_CD as diag3_cd,  DIAG4_CD as diag4_cd,  DIAG5_CD as diag5_cd,  LAB_VENDOR_TEST_ID as lab_vendor_test_id,  LAB_VENDOR_TEST_NAME as lab_vendor_test_name,  ALT_VENDOR_CD as alt_vendor_cd,  ALT_VENDOR_RESULT_NAME as alt_vendor_result_name,  LOCAL_LAB_CD as local_lab_cd,  SPECIMEN_SOURCE_DESC as specimen_source_desc,  TEST_METHOD_DESC as test_method_desc,  EQUIPMENT_ID as equipment_id,  LOINC_CD as loinc_cd,  VENDOR_LOINC_CD as vendor_loinc_cd,  LAB_RESULTS_VALUE as lab_results_value,  VENDOR_RESULT_UNITS_DESC as vendor_result_units_desc,  NORMALS_DEC_LOW_VALUE as normals_dec_low_value,  NORMALS_DEC_HIGH_VALUE as normals_dec_high_value,  NORMALS_ALPHA_VALUE as normals_alpha_value,  LAB_RESULT_ABNORMAL_CD as lab_result_abnormal_cd,  COMPONENT_CPT_CD as component_cpt_cd,  VALUE_TYPE_CD as value_type_cd,  CHANGED_IND as changed_ind,  HOSP_INP_IND as hosp_inp_ind,  PATIENT_RACE_DESC as patient_race_desc,  FASTING_IND as fasting_ind,  LAB_PARTNER_NAME as lab_partner_name,  COMMENT1 as comment1,  COMMENT2 as comment2,  COMMENT3 as comment3,  COMMENT4 as comment4,  COMMENT5 as comment5,  COMMENT6 as comment6,  COMMENT7 as comment7,  LAB_ERR_CD as lab_err_cd,  SRC_PLATFORM_CD as src_platform_cd,  SRC_CUST_ID as src_cust_id,  SRC_DIV_ID as src_div_id,  SRC_CUST_BEN_ID as src_cust_ben_id,  SRC_MBR_ID as src_mbr_id,  SRC_SUBS_MBR_ID as src_subs_mbr_id,  cast(SRC_PERSON_KEY as varchar(255)) as src_person_key,  cast(MEMBER_KEY as varchar(255)) as member_key,  REWORK_STATUS_CD as rework_status_cd,  ORDER_PROC_ID as order_proc_id,  to_char(ACTION_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as action_timestamp from EDW_PROD.LAB_SOURCE_1 subpartition (LSRCSP_19000101_11111111)"),
2,
Some("SA_CDF_DHNA_HYDRTN"),
Some("postit#6"),Map("fetchsize" -> "2500")).batch.write.mode("append").format("parquet").option("path", "abfss://dataproc@idea15pisplznonprodsa.dfs.core.windows.net/Target.parquet" + LocalDateTime.now.toString).save()